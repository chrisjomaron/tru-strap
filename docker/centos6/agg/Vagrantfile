# -*- mode: ruby -*-
# vi: set ft=ruby :
#
# Vagrantfile   Provision MSM/TSM trustrap services.
#
# Authors:      Paul Gilligan, <Paul.Gilligan@moneysupermarket.com>
#
# Description:  This is a multi-host docker provider provisioning Vagrantfile.
#
# Environment:  You must set some environment values in or to drive this:
#
#               export TRUSTRAP_ACCOUNT=msm    
#               export TRUSTRAP_USERBASE=gb
#               export TRUSTRAP_ENV=dev
#               export TRUSTRAP_SERVICE=agg 
#
#               The TRUSTRAP_SERVICE is new, this represents a group of roles
#               that are defined in the msm-provisoning puppet repository.
#
#               The combination TRUSTRAP_ENV and TRUSTRAP_SERVICE is used to 
#               select a set of roles from the services.yaml file and these
#               values are used to drive the provisioning of individual docker
#               vm's.
#
# Authentication:
#
#               Access to private git repositories (TRUSTRAP_REPONAME) requires
#               you to setup your own git private key on the machine that you
#               run vagrant from, SSH agent forwarding is set to true.
#
# Docker Dev Args:
#
#               Docker extended args for development:
#
#               --privileged=true      Give extended privileges to this container
# 
# Running:      Once you have setup the environment and services.yaml simply
#               run vagrant up.
#
#               You can access your new node from the node name via vargant:
#
#               vagrant ssh msm-gb-dev-agg-lts-mongodb
#
#               You can halt docker containers using vagrant halt.
#
#               You can destroy docker containers using vagrant destroy.
#
#               This has beed designed to be re-entrant, i.e. it can be re-run.    
# 
# Original:     https://github.com/MSMFG/tru-strap
# Git version:  https://github.com/pauldavidgilligan-msm/tru-strap
# Git branch:   handsome-vagrant-docker
#  
# useful links: http://docs.docker.com/reference/builder/#usage
#               https://docs.docker.com/reference/commandline/cli/
#               http://blog.zenika.com/index.php?post/2014/10/07/Setting-up-a-development-environment-using-Docker-and-Vagrant
#               https://github.com/jdeathe/centos-ssh

require 'yaml'

YAML_OPTIONS = "services.yaml"
VAGRANTFILE_API_VERSION = "2"

def set_fqdn(tag) 
  _fqdn = tag.gsub('_', '.')
  _fqdn = _fqdn.gsub('-', '.')
  return _fqdn.split('.').reverse.join('.') + '.internal'
end

# -----------------------------------------------------------------------------
# Environment Options
# -----------------------------------------------------------------------------
ENV['VAGRANT_DEFAULT_PROVIDER'] = 'docker'

if ENV['TRUSTRAP_ACCOUNT']
    TRUSTRAP_ACCOUNT = ENV['TRUSTRAP_ACCOUNT']
else
  abort("Environment variable: 'TRUSTRAP_ACCOUNT' is not set, exiting ...")
end

if ENV['TRUSTRAP_USERBASE']
    TRUSTRAP_USERBASE = ENV['TRUSTRAP_USERBASE']
else
  abort("Environment variable: 'TRUSTRAP_USERBASE' is not set, exiting ...")
end

if ENV['TRUSTRAP_ENV']
    TRUSTRAP_ENV = ENV['TRUSTRAP_ENV']
else
  abort("Environment variable: 'TRUSTRAP_ENV' is not set, exiting ...")
end

if ENV['TRUSTRAP_SERVICE']
    TRUSTRAP_SERVICE = ENV['TRUSTRAP_SERVICE']
else
  abort("Environment variable: 'TRUSTRAP_SERVICE' is not set, exiting ...")
end

# -----------------------------------------------------------------------------
# Environment Options
# -----------------------------------------------------------------------------
puts "-" * 40
puts "TRUSTRAP, vagrant docker provisioning"
puts "-" * 40
puts "TRUSTRAP_ACCOUNT      #{TRUSTRAP_ACCOUNT}"
puts "TRUSTRAP_USERBASE     #{TRUSTRAP_USERBASE}"
puts "TRUSTRAP_ENV          #{TRUSTRAP_ENV}"
puts "TRUSTRAP_SERVICE      #{TRUSTRAP_SERVICE}"

# -----------------------------------------------------------------------------
# Services Options
# -----------------------------------------------------------------------------
config_options = YAML.load_file(YAML_OPTIONS)
services = config_options['services']
services.each do |service, params|
  if service == "#{TRUSTRAP_ENV}-#{TRUSTRAP_SERVICE}"
    domain = params.detect {|param| param['domain']}
    TRUSTRAP_DOMAIN = domain['domain']
    if TRUSTRAP_DOMAIN
      puts "TRUSTRAP_DOMAIN       #{TRUSTRAP_DOMAIN}"
    else
      abort("Domain variable: 'domain' is not set in file #{YAML_OPTIONS}, exiting ...")
    end
  else
    abort("Service variable: #{TRUSTRAP_ENV}-#{TRUSTRAP_SERVICE} is not set in file #{YAML_OPTIONS}, exiting ...")
  end
end # if service == "#{TRUSTRAP_ENV}-#{TRUSTRAP_SERVICE}"

# -----------------------------------------------------------------------------
# Provision 
# 1. Network Services  (skydns, etcd)
# 2. Business Services (services.yaml)
# -----------------------------------------------------------------------------
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.ssh.username = "dev-opts"
  config.ssh.pty = true
  config.ssh.forward_agent = true

  # -------------------------------------------
  # Provision etcd
  # -------------------------------------------
  config.vm.define "etcd" do |m|
    m.vm.provider "docker" do |vm|
      vm.name            = "etcd.#{TRUSTRAP_DOMAIN}"
      vm.image           = "registry1-eu1.moneysupermarket.com:5000/etcd"
      vm.has_ssh         = false
      vm.cmd             = ["-peer-addr=etcd.#{TRUSTRAP_DOMAIN}:7001", "-addr=etcd.#{TRUSTRAP_DOMAIN}:4001"]
      vm.create_args     = ["--dns=8.8.8.8", "--dns=4.4.4.4"]
      vm.vagrant_machine = "dockerhost"
      vm.vagrant_vagrantfile = "../Vagrantfile.proxy"
    end
  end

  # -------------------------------------------
  # Provision skydns
  # -------------------------------------------
  @mopts = Hash["ETCD_INIT_MACHINE" => "etcd:4001", 
                "SKYDNS_ADDR" => "0.0.0.0:53", 
                "SKYDNS_NAMESERVERS" => "8.8.8.8", 
                "SKYDNS_DOMAIN" => "#{TRUSTRAP_DOMAIN}"]

  config.vm.define "skydns" do |m|
    m.vm.provider "docker" do |vm|
      vm.name            = "skydns.#{TRUSTRAP_DOMAIN}"
      vm.image           = "registry1-eu1.moneysupermarket.com:5000/skydns"
      vm.has_ssh         = false
      vm.env             = @mopts
      vm.create_args     = ["--dns=8.8.8.8", "--dns=4.4.4.4"]
      vm.vagrant_machine = "dockerhost"
      vm.vagrant_vagrantfile = "../Vagrantfile.proxy"
      vm.link("etcd.#{TRUSTRAP_DOMAIN}:etcd")
    end
  end
end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # -------------------------------------------
  # Provision Business Serivices
  # -------------------------------------------
  services.each do |service, params|
    puts "-" * 40
    puts "Processing service options for [#{TRUSTRAP_ENV}-#{TRUSTRAP_SERVICE}]" 

    git = params.detect {|param| param['git']}
    TRUSTRAP_REPONAME   = "#{git['git'][0]['reponame']}"
    TRUSTRAP_REPOUSER   = "#{git['git'][1]['repouser']}"
    TRUSTRAP_REPOBRANCH = "#{git['git'][2]['repobranch']}"

    rls = params.detect {|param| param['roles']}

    puts "-" * 40
    puts "TRUSTRAP_REPOUSER     #{TRUSTRAP_REPOUSER}"
    puts "TRUSTRAP_REPONAME     #{TRUSTRAP_REPONAME}"
    puts "TRUSTRAP_REPOBRANCH   #{TRUSTRAP_REPOBRANCH}"
    puts "=" * 40

    # provision multi-machines
    rls.each do |key, value|
      data_set =  value.select {|d| d['data']}
      app_set  =  value.select {|a| a['app']}

      # provision data
      data_set.each do |d|
        if d['enabled'] 
          _role = "#{d['data']}"
          _ts_args = "-r #{_role} -e #{TRUSTRAP_ENV} -u #{TRUSTRAP_REPOUSER} -n #{TRUSTRAP_REPONAME} -b #{TRUSTRAP_REPOBRANCH}"
          _tag = "#{TRUSTRAP_ACCOUNT}-#{TRUSTRAP_USERBASE}-#{TRUSTRAP_ENV}-#{_role}"
          _fqdn = set_fqdn(_tag)
          puts "Provisioning role #{_role} docker(enabled) fqdn [#{_fqdn}] for data tier."
          config.vm.define "#{_tag}" do |m|
            m.vm.provider "docker" do |vm|
              vm.has_ssh = true
              vm.build_dir = "."
              vm.build_args = ["--tag=#{_tag}"]
              if d['ports'] 
                vm.ports = d['ports'] 
              end
              vm.create_args = ["--privileged", "--dns-search=#{TRUSTRAP_DOMAIN}", "--dns=8.8.8.8", "--hostname=#{_fqdn}"]
              vm.vagrant_machine = "dockerhost"
              vm.vagrant_vagrantfile = "../Vagrantfile.proxy"
              vm.link("etcd.#{TRUSTRAP_DOMAIN}:etcd")
              vm.link("skydns.#{TRUSTRAP_DOMAIN}:skydns")
            end
          end 
          config.vm.provision "shell", inline: "echo Node #{_tag} is very handsome!"
          config.vm.provision :shell, :path => "bin/resolv.sh"
          config.vm.provision :shell, :path => "bin/init.sh", :args => _ts_args
        end
      end # data_set.each do |d|

    end # rls.each do |key, value|
  end
end



