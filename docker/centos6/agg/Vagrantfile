# -*- mode: ruby -*-
# vi: set ft=ruby :
#
# Vagrantfile   Provision MSM/TSM trustrap services.
#
# Authors:      Paul Gilligan, <Paul.Gilligan@moneysupermarket.com>
#
# Description:  This is a multi-host docker provider provisioning Vagrantfile.
#
#               You must set some environment values in or to drive this:
#
#               export TRUSTRAP_ACCOUNT=msm    
#               export TRUSTRAP_USERBASE=gb
#               export TRUSTRAP_ENV=dev
#               export TRUSTRAP_SERVICE=agg 
#
#               The TRUSTRAP_SERVICE is new, this represents a group of roles
#               that are defined in the msm-provisoning puppet repository.
#
#               The combination TRUSTRAP_ENV and TRUSTRAP_SERVICE is used to 
#               select a set of roles from the services.yaml file and these
#               values are used to drive the provisioning of individual docker
#               vm's.
#               
#               Once you have setup the environment and services.yaml simply
#               run vagrant up.
#
#               You can access your new node from the node name via vargant:
#
#               vagrant ssh msm-gb-dev-agg-lts-mongodb
#
#               You can halt docker containers using vagrant halt.
#
#               You can destroy docker containers using vagrant destroy.
#
#               This has beed designed to be re-entrant, i.e. it can be re-run.    
# 
# Original:     https://github.com/MSMFG/tru-strap
# Git version:  https://github.com/pauldavidgilligan-msm/tru-strap
# Git branch:   handsome-vagrant-docker
#  
# useful links:
#               http://docs.docker.com/reference/builder/#usage
#               https://docs.docker.com/reference/commandline/cli/
#               http://blog.zenika.com/index.php?post/2014/10/07/Setting-up-a-development-environment-using-Docker-and-Vagrant
#               https://github.com/jdeathe/centos-ssh

require 'yaml'

YAML_OPTIONS = "services.yaml"
VAGRANTFILE_API_VERSION = "2"

def set_fqdn(tag) 
  _fqdn = tag.gsub('_', '.')
  _fqdn = _fqdn.gsub('-', '.')
  return _fqdn.split('.').reverse.join('.') + '.internal'
end

# -----------------------------------------------------------------------------
# Environment Options
# -----------------------------------------------------------------------------
ENV['VAGRANT_DEFAULT_PROVIDER'] = 'docker'

if ENV['TRUSTRAP_ACCOUNT']
    TRUSTRAP_ACCOUNT = ENV['TRUSTRAP_ACCOUNT']
else
  abort("Environment variable: 'TRUSTRAP_ACCOUNT' is not set, exiting ...")
end

if ENV['TRUSTRAP_USERBASE']
    TRUSTRAP_USERBASE = ENV['TRUSTRAP_USERBASE']
else
  abort("Environment variable: 'TRUSTRAP_USERBASE' is not set, exiting ...")
end

if ENV['TRUSTRAP_ENV']
    TRUSTRAP_ENV = ENV['TRUSTRAP_ENV']
else
  abort("Environment variable: 'TRUSTRAP_ENV' is not set, exiting ...")
end

if ENV['TRUSTRAP_SERVICE']
    TRUSTRAP_SERVICE = ENV['TRUSTRAP_SERVICE']
else
  abort("Environment variable: 'TRUSTRAP_SERVICE' is not set, exiting ...")
end

# -----------------------------------------------------------------------------
# Environment Options
# -----------------------------------------------------------------------------
puts "-" * 40
puts "TRUSTRAP, vagrant docker provisioning"
puts "-" * 40
puts "TRUSTRAP_ACCOUNT      #{TRUSTRAP_ACCOUNT}"
puts "TRUSTRAP_USERBASE     #{TRUSTRAP_USERBASE}"
puts "TRUSTRAP_ENV          #{TRUSTRAP_ENV}"
puts "TRUSTRAP_SERVICE      #{TRUSTRAP_SERVICE}"

# -----------------------------------------------------------------------------
# Yaml Options
# -----------------------------------------------------------------------------
config_options = YAML.load_file(YAML_OPTIONS)
services = config_options['services']
services.each do |service, params|
  if service == "#{TRUSTRAP_ENV}-#{TRUSTRAP_SERVICE}"
      puts "-" * 40
      puts "Processing service options for [#{TRUSTRAP_ENV}-#{TRUSTRAP_SERVICE}]" 
      dns = params.detect {|param| param['dns']}
      TRUSTRAP_DNS_ARG = "\"--dns=#{dns['dns'][0]['dns-1']}\", \"--dns=#{dns['dns'][1]['dns-2']}\""
      puts "Set DNS #{TRUSTRAP_DNS_ARG}"
      git = params.detect {|param| param['git']}
      TRUSTRAP_REPONAME   = "#{git['git'][0]['reponame']}"
      TRUSTRAP_REPOUSER   = "#{git['git'][1]['repouser']}"
      TRUSTRAP_REPOBRANCH = "#{git['git'][2]['repobranch']}"
      rls = params.detect {|param| param['roles']}

      puts "-" * 40
      puts "TRUSTRAP_REPOUSER     #{TRUSTRAP_REPOUSER}"
      puts "TRUSTRAP_REPONAME     #{TRUSTRAP_REPONAME}"
      puts "TRUSTRAP_REPOBRANCH   #{TRUSTRAP_REPOBRANCH}"
      puts "=" * 40

      # this is made to be somewhat backwards compatible.
      # ./init.sh -s agg -e dev -u pauldavidgilligan-msm -n msm-provisioning -b handsome-vagrant-docker
      TRUSTRAP_ARGS = "-s #{TRUSTRAP_SERVICE} -e #{TRUSTRAP_ENV} -u #{TRUSTRAP_REPOUSER} -n #{TRUSTRAP_REPONAME} -b #{TRUSTRAP_REPOBRANCH}"
    
      # provision multi-machines
      rls.each do |key, value|
        data_set =  value.select {|d| d['data']}
        app_set  =  value.select {|a| a['app']}
        # provision data
        data_set.each do |d|
          if d['enabled'] 
            _tag = "#{TRUSTRAP_ACCOUNT}-#{TRUSTRAP_USERBASE}-#{TRUSTRAP_ENV}-#{d['data']}"
            _fqdn = set_fqdn(_tag)
            _hostname = _fqdn.split('.')[0..1].join('.')
            _search = _fqdn.split('.')[-5..-1].join('.')
            puts "Provisioning Docker(enabled) fqdn [#{_fqdn}] for data tier."
            Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
              config.ssh.username = "dev-opts"
              config.ssh.pty = true
              config.vm.define "#{_tag}" do |m|
                m.vm.provider "docker" do |vm|
                  vm.has_ssh = true
                  vm.build_dir = "."
                  vm.build_args = ["--tag=#{_tag}"]
                  vm.create_args = ["--dns-search=#{_search}", "--dns=8.8.8.8", "--dns=4.4.4.4", "--hostname=#{_hostname}"]
                  vm.vagrant_machine = "dockerhost"
                  vm.vagrant_vagrantfile = "../Vagrantfile.proxy"
                end
              end 
             config.vm.provision "shell", inline: "echo node #{_tag} is very handsome!"
             #config.vm.provision :shell, :path => "../../../init.sh", :args => TRUSTRAP_ARGS
            end
          end
        end 
        
        # provision apps
        app_set.each do |a|
          if a['enabled']
            _tag = "#{TRUSTRAP_ACCOUNT}-#{TRUSTRAP_USERBASE}-#{TRUSTRAP_ENV}-#{a['app']}"
            _fqdn = set_fqdn(_tag)
            _hostname = _fqdn.split('.')[0..1].join('.')
            _search = _fqdn.split('.')[-5..-1].join('.')
            puts "Provisioning Docker(enabled) fqdn [#{_fqdn}] for app tier."
            Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
              config.ssh.username = "dev-opts"
              config.ssh.pty = true
              config.vm.define "#{_tag}" do |m|
                m.vm.provider "docker" do |vm|
                  vm.has_ssh = true
                  vm.build_dir = "."
                  vm.build_args = ["--tag=#{_tag}"]
                  vm.create_args = ["--dns-search=#{_search}", "--dns=8.8.8.8", "--dns=4.4.4.4", "--hostname=#{_hostname}"]
                  vm.vagrant_machine = "dockerhost"
                  vm.vagrant_vagrantfile = "../Vagrantfile.proxy"
                end
              end
              config.vm.provision "shell", inline: "echo node #{_tag}  is very handsome!"
              #config.vm.provision :shell, :path => "../../../init.sh", :args => TRUSTRAP_ARGS
            end
          end
        end

      end # rls.each do |key, value|
  else
    abort("Service variable: #{TRUSTRAP_ENV}-#{TRUSTRAP_SERVICE} is not set in file #{YAML_OPTIONS}, exiting ...")
  end
end

